// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Adarec.Domain.Models.Entities;

public partial class adarecContext : DbContext
{
    public adarecContext(DbContextOptions<adarecContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Brand> Brands { get; set; }

    public virtual DbSet<Comment> Comments { get; set; }

    public virtual DbSet<Customer> Customers { get; set; }

    public virtual DbSet<DeviceType> DeviceTypes { get; set; }

    public virtual DbSet<EmailConfig> EmailConfigs { get; set; }

    public virtual DbSet<EmailTemplate> EmailTemplates { get; set; }

    public virtual DbSet<IdentificationType> IdentificationTypes { get; set; }

    public virtual DbSet<ItemStatus> ItemStatuses { get; set; }

    public virtual DbSet<Model> Models { get; set; }

    public virtual DbSet<Order> Orders { get; set; }

    public virtual DbSet<OrderAssignment> OrderAssignments { get; set; }

    public virtual DbSet<OrderDetail> OrderDetails { get; set; }

    public virtual DbSet<OrderStatus> OrderStatuses { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<Solution> Solutions { get; set; }

    public virtual DbSet<User> Users { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.UseCollation("SQL_Latin1_General_CP1_CI_AS");

        modelBuilder.Entity<Brand>(entity =>
        {
            entity.Property(e => e.Status).HasDefaultValue(true);
        });

        modelBuilder.Entity<Comment>(entity =>
        {
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.Order).WithMany(p => p.Comments)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_comments_order");

            entity.HasOne(d => d.User).WithMany(p => p.Comments)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_comments_user");
        });

        modelBuilder.Entity<Customer>(entity =>
        {
            entity.HasIndex(e => e.IdentificationNumber, "IX_customers_identification_number_active")
                .IsUnique()
                .HasFilter("([status]=(1))");

            entity.Property(e => e.Status).HasDefaultValue(true);

            entity.HasOne(d => d.IdentificationType).WithMany(p => p.Customers)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_customers_identification_type");
        });

        modelBuilder.Entity<DeviceType>(entity =>
        {
            entity.Property(e => e.Status).HasDefaultValue(true);
        });

        modelBuilder.Entity<EmailConfig>(entity =>
        {
            entity.Property(e => e.Status).HasDefaultValue(true);

            entity.HasOne(d => d.Template).WithMany(p => p.EmailConfigs)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_email_configs_template");

            entity.HasOne(d => d.User).WithMany(p => p.EmailConfigs).HasConstraintName("FK_email_configs_user");
        });

        modelBuilder.Entity<EmailTemplate>(entity =>
        {
            entity.Property(e => e.Status).HasDefaultValue(true);
        });

        modelBuilder.Entity<IdentificationType>(entity =>
        {
            entity.Property(e => e.Status).HasDefaultValue(true);
        });

        modelBuilder.Entity<ItemStatus>(entity =>
        {
            entity.Property(e => e.Status).HasDefaultValue(true);
        });

        modelBuilder.Entity<Model>(entity =>
        {
            entity.Property(e => e.Status).HasDefaultValue(true);

            entity.HasOne(d => d.Brand).WithMany(p => p.Models)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_models_brand");

            entity.HasOne(d => d.DeviceType).WithMany(p => p.Models)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_models_device_type");
        });

        modelBuilder.Entity<Order>(entity =>
        {
            entity.Property(e => e.OrderStatusId).HasDefaultValue(1);

            entity.HasOne(d => d.OrderStatus).WithMany(p => p.Orders)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_orders_status");
        });

        modelBuilder.Entity<OrderAssignment>(entity =>
        {
            entity.Property(e => e.AssignedAt).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.Order).WithMany(p => p.OrderAssignments)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_order_assignments_order");

            entity.HasOne(d => d.Technician).WithMany(p => p.OrderAssignments)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_order_assignments_technician");
        });

        modelBuilder.Entity<OrderDetail>(entity =>
        {
            entity.Property(e => e.ItemStatusId).HasDefaultValue(1);
            entity.Property(e => e.Quantity).HasDefaultValue(1);

            entity.HasOne(d => d.ItemStatus).WithMany(p => p.OrderDetails)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_order_details_item_status");

            entity.HasOne(d => d.Model).WithMany(p => p.OrderDetails)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_order_details_model");

            entity.HasOne(d => d.Order).WithMany(p => p.OrderDetails)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_order_details_order");
        });

        modelBuilder.Entity<OrderStatus>(entity =>
        {
            entity.Property(e => e.Status).HasDefaultValue(true);
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.Property(e => e.Status).HasDefaultValue(true);
        });

        modelBuilder.Entity<Solution>(entity =>
        {
            entity.Property(e => e.ClosedAt).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.Order).WithMany(p => p.Solutions)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_solutions_order");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.Property(e => e.Status).HasDefaultValue(true);

            entity.HasMany(d => d.Roles).WithMany(p => p.Users)
                .UsingEntity<Dictionary<string, object>>(
                    "UserRole",
                    r => r.HasOne<Role>().WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_user_roles_role"),
                    l => l.HasOne<User>().WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_user_roles_user"),
                    j =>
                    {
                        j.HasKey("UserId", "RoleId");
                        j.ToTable("user_roles");
                        j.HasIndex(new[] { "RoleId" }, "IX_user_roles_role_id");
                        j.IndexerProperty<int>("UserId").HasColumnName("user_id");
                        j.IndexerProperty<int>("RoleId").HasColumnName("role_id");
                    });
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}